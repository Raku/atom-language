'scopeName': 'source.perl6'
'name': 'Perl 6 FE'
'fileTypes': [
  'p6'
  'pl6'
  'pm6'
  't'
  't6'
  'pod6'
  'nqp'
]
'patterns': [
  # Pod =finish
  {
    'begin': '^\\s*(=)(finish)'
    'beginCaptures':
      '1':
        'name': 'storage.modifier.block.finish.perl6'
      '2':
        'name': 'keyword.operator.block.finish.perl6'
    'contentName': 'comment.block.finish.perl6'
    'patterns': [
      {
        'include': '#comment-block-syntax'
      }
    ]
  }
  {
    'include': '#comment-block-delimited'
  }
  # Pod =para and =for
  {
    'begin': '^\\s*(=)(?:(para)|(for)\\s+(\\w+))'
    'beginCaptures':
      '1':
        'name': 'storage.modifier.block.paragraph.perl6'
      '2':
        'name': 'keyword.operator.block.paragraph.perl6'
      '3':
        'name': 'entity.other.attribute-name.paragraph.perl6'
    'end': '(?=^\\s*$|^\\s*=\\w+.*$)'
    'contentName': 'comment.block.paragraph.perl6'
    'patterns': [
      {
        'include': '#comment-block-syntax'
      }
    ]
  }
  {
    'include': '#comment-block-abbreviated'
  }
  {
    'match': '^\\s*(#)([\\|\\=])(.*)\\n'
    'captures':
      '1':
        'name': 'comment.punctuation.pound.perl6'
      '2':
        'name': 'meta.declarator.perl6'
      '3':
        'name': 'comment.inline.declarator.perl6'
    'name': 'meta.documentation.block.declarator.perl6'
  }
## See `./dev/Q_q_qq.p6` to alter the generator for this code
#0START DO NOT EDIT BETWEEN THIS LINE AND #0END
  # multiline comment triple_paren
  {
  'begin': '\\s*#`\\(\\(\\(',
  'end': '\\)\\)\\)',
  'name': 'comment.multiline.hash-tick.triple_paren.perl6'
  'patterns': [
    {
      'begin': '\\(\\(\\('
      'end': '\\)\\)\\)'
      'name': 'comment.internal.triple_paren.perl6'
    }
  ]
  }
  # multiline comment triple_bracket
  {
  'begin': '\\s*#`\\[\\[\\[',
  'end': '\\]\\]\\]',
  'name': 'comment.multiline.hash-tick.triple_bracket.perl6'
  'patterns': [
    {
      'begin': '\\[\\[\\['
      'end': '\\]\\]\\]'
      'name': 'comment.internal.triple_bracket.perl6'
    }
  ]
  }
  # multiline comment triple_brace
  {
  'begin': '\\s*#`\\{\\{\\{',
  'end': '\\}\\}\\}',
  'name': 'comment.multiline.hash-tick.triple_brace.perl6'
  'patterns': [
    {
      'begin': '\\{\\{\\{'
      'end': '\\}\\}\\}'
      'name': 'comment.internal.triple_brace.perl6'
    }
  ]
  }
  # multiline comment double_angle
  {
  'begin': '\\s*#`<<',
  'end': '>>',
  'name': 'comment.multiline.hash-tick.double_angle.perl6'
  'patterns': [
    {
      'begin': '<<'
      'end': '>>'
      'name': 'comment.internal.double_angle.perl6'
    }
  ]
  }
  # multiline comment double_paren
  {
  'begin': '\\s*#`\\(\\(',
  'end': '\\)\\)',
  'name': 'comment.multiline.hash-tick.double_paren.perl6'
  'patterns': [
    {
      'begin': '\\(\\('
      'end': '\\)\\)'
      'name': 'comment.internal.double_paren.perl6'
    }
  ]
  }
  # multiline comment double_bracket
  {
  'begin': '\\s*#`\\[\\[',
  'end': '\\]\\]',
  'name': 'comment.multiline.hash-tick.double_bracket.perl6'
  'patterns': [
    {
      'begin': '\\[\\['
      'end': '\\]\\]'
      'name': 'comment.internal.double_bracket.perl6'
    }
  ]
  }
  # multiline comment double_brace
  {
  'begin': '\\s*#`{{',
  'end': '}}',
  'name': 'comment.multiline.hash-tick.double_brace.perl6'
  'patterns': [
    {
      'begin': '{{'
      'end': '}}'
      'name': 'comment.internal.double_brace.perl6'
    }
  ]
  }
  # multiline comment brace
  {
  'begin': '\\s*#`{',
  'end': '}',
  'name': 'comment.multiline.hash-tick.brace.perl6'
  'patterns': [
    {
      'begin': '{'
      'end': '}'
      'name': 'comment.internal.brace.perl6'
    }
  ]
  }
  # multiline comment angle
  {
  'begin': '\\s*#`<',
  'end': '>',
  'name': 'comment.multiline.hash-tick.angle.perl6'
  'patterns': [
    {
      'begin': '<'
      'end': '>'
      'name': 'comment.internal.angle.perl6'
    }
  ]
  }
  # multiline comment paren
  {
  'begin': '\\s*#`\\(',
  'end': '\\)',
  'name': 'comment.multiline.hash-tick.paren.perl6'
  'patterns': [
    {
      'begin': '\\('
      'end': '\\)'
      'name': 'comment.internal.paren.perl6'
    }
  ]
  }
  # multiline comment bracket
  {
  'begin': '\\s*#`\\[',
  'end': '\\]',
  'name': 'comment.multiline.hash-tick.bracket.perl6'
  'patterns': [
    {
      'begin': '\\['
      'end': '\\]'
      'name': 'comment.internal.bracket.perl6'
    }
  ]
  }
  # multiline comment left_double_right_double
  {
  'begin': '\\s*#`“',
  'end': '”',
  'name': 'comment.multiline.hash-tick.left_double_right_double.perl6'
  'patterns': [
    {
      'begin': '“'
      'end': '”'
      'name': 'comment.internal.left_double_right_double.perl6'
    }
  ]
  }
  # multiline comment left_single_right_single
  {
  'begin': '\\s*#`‘',
  'end': '’',
  'name': 'comment.multiline.hash-tick.left_single_right_single.perl6'
  'patterns': [
    {
      'begin': '‘'
      'end': '’'
      'name': 'comment.internal.left_single_right_single.perl6'
    }
  ]
  }
  # multiline comment fw_cornerbracket
  {
  'begin': '\\s*#`「',
  'end': '」',
  'name': 'comment.multiline.hash-tick.fw_cornerbracket.perl6'
  'patterns': [
    {
      'begin': '「'
      'end': '」'
      'name': 'comment.internal.fw_cornerbracket.perl6'
    }
  ]
  }
  # multiline comment hw_cornerbracket
  {
  'begin': '\\s*#`｢',
  'end': '｣',
  'name': 'comment.multiline.hash-tick.hw_cornerbracket.perl6'
  'patterns': [
    {
      'begin': '｢'
      'end': '｣'
      'name': 'comment.internal.hw_cornerbracket.perl6'
    }
  ]
  }
#0END
  #{
  #  'match': '(?x) (\\S+) \\s+ (?!= =>)'
  #  'name': 'constant'
  #}
  {
    'begin': '(^[ \\t]+)?(?=#)'
    'beginCaptures':
      '1':
        'name': 'punctuation.whitespace.comment.leading.perl6'
    'end': '(?!\\G)'
    'patterns': [
      {
        'begin': '#'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.perl6'
        'end': '\\n'
        'name': 'comment.line.number-sign.perl6'
      }
    ]
  }
  {
    'match': '(?x)
      \\x{2208}|\\(elem\\)|\\x{2209}|\\!\\(elem\\)|
      \\x{220B}|\\(cont\\)|\\x{220C}|\\!\\(cont\\)|
      \\x{2286}|\\(<=\\)  |\\x{2288}|\\!\\(<=\\)  |
      \\x{2282}|\\(<\\)   |\\x{2284}|\\!\\(<\\)   |
      \\x{2287}|\\(>=\\)  |\\x{2289}|\\!\\(>=\\)  |
      \\x{2283}|\\(>\\)   |\\x{2285}|\\!\\(>\\)   |
      \\x{227C}|\\(<\\+\\)|\\x{227D}|\\(>\\+\\)   |
      \\x{222A}|\\(\\|\\) |\\x{2229}|\\(&\\)      |
      \\x{2216}|\\(\\-\\) |\\x{2296}|\\(\\^\\)    |
      \\x{228D}|\\(\\.\\) |\\x{228E}|\\(\\+\\)'
    'name': 'keyword.operator.setbagmix.perl6'
  }
  {
    'captures':
      '1':
        'name': 'storage.type.class.perl6'
      '3':
        'name': 'entity.name.type.class.perl6'
    'match': '(?x)
      (
        class|enum|grammar|knowhow|module|
        package|role|slang|subset|monitor|actor
      )
      (\\s+)
      (
        (
          (?:::|\')?
          (?:
            ([a-zA-Z_\xc0-\xff\\$])
            ([a-zA-Z0-9_\xc0-\xff\\$]|[\\-\'][a-zA-Z0-9_\xc0-\xff\\$])*
          )
        )+
      )'
    'name': 'meta.class.perl6'
  }
  {
    'include': '#p5_regex'
  }
  # Finds regex at start of line or after: = , ( ) ~ => or when
  {
    'begin': '(?x)
      (?<=^|[\\=,\\(\\[\\~]|when|=>) \\s*
      (?:(m|rx)((?:(?<!\\:P5)\\s*:\\w+(?!\\s*\\:P5))*))? \\s*
      (\\/)'
    'beginCaptures':
      '1':
        'name': 'string.regexp.construct.perl6'
      '2':
        'name': 'entity.name.section.adverb.regexp.perl6'
      '3':
        'name': 'punctuation.definition.regexp.perl6'
    'end': '(?<!\\\\)(\\/)'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.regexp.perl6'
    'contentName': 'string.regexp.perl6'
    'patterns': [
      {
        'include': '#interpolation'
      }
      {
        'include': 'source.regexp.perl6'
      }
    ]
  }
  # Finds regex marked rx or m as long as there's whitespace in front
  {
    'begin': '(?x) \\s+
      (?: (?<=^|\\s) (m|rx)((?:(?<!\\:P5)\\s*:\\w (?!\\s*\\\\:P5))*))
      \\s*
      (\\/)'
    'beginCaptures':
      '1':
        'name': 'string.regexp.construct.perl6'
      '2':
        'name': 'entity.name.section.adverb.regexp.perl6'
      '3':
        'name': 'punctuation.definition.regexp.perl6'
    'end': '(?<!\\\\)(\\/)'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.regexp.perl6'
    'contentName': 'string.regexp.perl6'
    'patterns': [
      {
        'include': '#interpolation'
      }
      {
        'include': 'source.regexp.perl6'
      }
    ]
  }
  {
    'begin': '(?<![\\w\\/])(m|rx)((?:\\s*:\\w+)*)\\s*(\\{)'
    'beginCaptures':
      '1':
        'name': 'string.regexp.construct.perl6'
      '2':
        'name': 'entity.name.section.adverb.regexp.perl6'
      '3':
        'name': 'punctuation.definition.regexp.perl6'
    'end': '(?<!\\\\)(\\})'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.regexp.perl6'
    'contentName': 'string.regexp.perl6'
    'patterns': [
      {
        'include': '#interpolation'
      }
      {
        'include': 'source.regexp.perl6'
      }
    ]
  }
  {
    'begin': '(?<![\\w\\/])(m|rx)((?:\\s*:\\w+)*)\\s*(\\[)'
    'beginCaptures':
      '1':
        'name': 'string.regexp.construct.perl6'
      '2':
        'name': 'entity.name.section.adverb.regexp.perl6'
      '3':
        'name': 'punctuation.definition.regexp.perl6'
    'end': '(?<!\\\\)(\\])'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.regexp.perl6'
    'contentName': 'string.regexp.perl6'
    'patterns': [
      {
        'include': '#interpolation'
      }
      {
        'include': 'source.regexp.perl6'
      }
    ]
  }
  {
    'begin': '(?<![\\w\\/])(m|rx)((?:\\s*:\\w+)*)\\s*(\\|)'
    'beginCaptures':
      '1':
        'name': 'string.regexp.construct.perl6'
      '2':
        'name': 'entity.name.section.adverb.regexp.perl6'
      '3':
        'name': 'punctuation.definition.regexp.perl6'
    'end': '(?<!\\\\)(\\|)'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.regexp.perl6'
    'contentName': 'string.regexp.perl6'
    'patterns': [
      {
        'include': '#interpolation'
      }
      {
        'include': 'source.regexp.perl6'
      }
    ]
  }
  {
    'begin': '(?<![\\w\\/])(m|rx)((?:\\s*:\\w+)*)\\s*(\\!)'
    'beginCaptures':
      '1':
        'name': 'string.regexp.construct.perl6'
      '2':
        'name': 'entity.name.section.adverb.regexp.perl6'
      '3':
        'name': 'punctuation.definition.regexp.perl6'
    'end': '(?<!\\\\)(\\!)'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.regexp.perl6'
    'contentName': 'string.regexp.perl6'
    'patterns': [
      {
        'include': '#interpolation'
      }
      {
        'include': 'source.regexp.perl6'
      }
    ]
  }
  {
    'begin': '(?<![\\w\\/])(m|rx)((?:\\s*:\\w+)*)\\s*(~)'
    'beginCaptures':
      '1':
        'name': 'string.regexp.construct.perl6'
      '2':
        'name': 'entity.name.section.adverb.regexp.perl6'
      '3':
        'name': 'punctuation.definition.regexp.perl6'
    'end': '(?<!\\\\)(\\~)'
    'endCaptures':
      '1':
        'name': 'punctuation.definition.regexp.perl6'
    'contentName': 'string.regexp.perl6'
    'patterns': [
      {
        'include': '#interpolation'
      }
      {
        'include': 'source.regexp.perl6'
      }
    ]
  }
  {
    'begin': '(?<=\\W|^)\''
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.perl6'
    'end': '\''
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.perl6'
    'name': 'string.quoted.single.perl6'
    'patterns': [
      {
        'match': '\\\\[\'\\\\]'
        'name': 'constant.character.escape.perl6'
      }
    ]
  }
  {
    'begin': '(?<=\\W|^)｢'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.perl6'
    'end': '｣'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.perl6'
    'name': 'string.quoted.single.perl6'
    'patterns': [
      {
        'include': 'source.quoting.perl6#q_hw_cornerbracket_string_content'
      }
    ]
  }
  {
    'begin': '(?<=\\W|^)‘'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.perl6'
    'end': '’'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.perl6'
    'name': 'string.quoted.single.perl6'
    'patterns': [
      {
        'match': '\\\\[‘’\\\\]'
        'name': 'constant.character.escape.perl6'
      }
      {
        'include': 'source.quoting.perl6#q_left_single_right_single_string_content'
      }
    ]
  }
  {
    'begin': '"'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.perl6'
    'end': '"'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.perl6'
    'name': 'string.quoted.double.perl6'
    'patterns': [
      {
        'match': '\\\\["abtnfre\\\\\\{\\}]'
        'name': 'constant.character.escape.perl6'
      }
      {
        'include': '#interpolation'
      }
      {
        'include': '#special_variables'
      }
      {
        'include': '#variables'
      }
    ]
  }
  {
    'begin': '“'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.perl6'
    'end': '”'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.perl6'
    'name': 'string.quoted.double.perl6'
    'patterns': [
      {
        'match': '\\\\[“”abtnfre\\\\\\{\\}]'
        'name': 'constant.character.escape.perl6'
      }
      {
        'include': '#interpolation'
      }
      {
        'include': '#variables'
      }
      {
        'include': '#special_variables'
      }
      {
        'include': 'source.quoting.perl6#q_left_double_right_double_string_content'
      }
    ]
  }
  {
    'begin': '”'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.perl6'
    'end': '”'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.perl6'
    'name': 'string.quoted.double.perl6'
    'patterns': [
      {
        'match': '\\\\[”“abtnfre\\\\\\{\\}]'
        'name': 'constant.character.escape.perl6'
      }
      {
        'include': '#interpolation'
      }
      {
        'include': '#variables'
      }
      {
        'include': '#special_variables'
      }
      {
        'include': 'source.quoting.perl6#q_right_double_right_double_string_content'
      }
    ]
  }
  {
    'include': '#shellquotes'
  }
  {
    'include': '#heredocs'
  }
  { 'include': 'source.quoting.perl6' }
  {
    'match': '\\b\\$\\w+\\b'
    'name': 'variable.other.perl6'
  }
  {
    'begin': '(?x)(?<![%$&@]|\\w)
      (?:(multi)(?=\\s+))?
      (macro|sub|submethod|method|multi|proto|only|category)
      (!)?(?=\\s+\\w)'
    'beginCaptures':
      '1':
        'name': 'storage.type.declarator.multi.perl6'
      '2':
        'name': 'storage.type.declarator.type.perl6'
      '3':
        'name': 'support.class.method.private.perl6'
    'end': '\\s*(?=[\\(\\{])'
    'contentName': 'entity.name.function.perl6'
  }
  {
    'begin': '(?<![\\.:])(regex|rule|token)(?!\\s*=>)'
    'beginCaptures':
      '1':
        'name': 'storage.type.declare.regexp.named.perl6'
    'end': '(?<!\\\\)\\}'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.regexp.named.perl6'
    'name': 'meta.regexp.named.perl6'
    'patterns': [
      {
        'match': '\\w+'
        'name': 'entity.name.function.regexp.named.perl6'
      }
      {
        'match': '(:)(\\w+)'
        'captures':
          '1':
            'name': 'punctuation.definition.regexp.adverb.perl6'
          '2':
            'name': 'support.type.class.adverb.perl6'
        'name': 'meta.regexp.named.adverb.perl6'
      }
      {
        'begin': '\\x{00AB}|\\<'
        'end': '(\\x{00BB}|\\>)(?=[\\s\\{])'
        'contentName': 'string.array.words.perl6'
      }
      {
        'begin': '\\('
        'end': '(?<!\\\\)\\)'
        'captures':
          '0':
            'name': 'punctuation.definition.regexp.named.signature.perlfe'
        'name': 'meta.regexp.named.signature.perl6'
        'patterns': [
          {
            'include': '$self'
          }
        ]
      }
      {
        'begin': '\\{'
        'end': '(?=\\})'
        'captures':
          '0':
            'name': 'punctuation.definition.regex.named.perl6'
        'name': 'meta.regexp.named.block.perl6'
        'patterns': [
          {
            'include': '#interpolation'
          }
          {
            'include': 'source.regexp.perl6'
          }
        ]
      }
    ]
  }
  {
    'match': '\\b(?<![\\-:])(self)(?!\\-)\\b'
    'name': 'variable.language.perl6'
  }
  {
    'match': '\\b(?<![\\-:])(use|require|no|need)(?!\\-)\\b'
    'name': 'keyword.other.include.perl6'
  }
  {
    'match': '(?x)\\b(?<![\\-:])(
      if|else|elsif|unless|with|orwith|without
    )(?!\\-)\\b'
    'name': 'keyword.control.conditional.perl6'
  }
  {
    'match': '\\b(?<![\\-:])(let|my|our|state|temp|has|constant)(?!\\-)\\b'
    'name': 'storage.modifier.declarator.perl6'
  }
  {
    'match': '([+\\-.*/]|\\|\\|)?(?<!\\=)=(?![\\>\\=\\~])'
    'name': 'storage.modifier.assignment.perl6'
  }
  {
    'match': '\\b(for|loop|repeat|while|until|gather|given)(?!\\-)\\b'
    'name': 'keyword.control.repeat.perl6'
  }
  {
    'match': '(?x)\\b(?<![\\-:])(
       take|do|when|next|last|redo|return|return-rw
      |contend|maybe|defer|default|exit
      |make|made|continue|break|goto|leave|supply
      |async|lift|await|start|react|whenever
    )(?!\\-)\\b'
    'name': 'keyword.control.flowcontrol.perl6'
  }
  {
    'match': '(?x)\\b(?<![\\-:])
      (is|does|as|but|trusts|of|returns|handles|where|augment|supersede)
      (?!\\-)\\b (?!\\s*=>)'
    'name': 'storage.modifier.type.constraints.perl6'
  }
  {
    'match': '(?x)\\b(?<![\\-:])(
       BEGIN|CHECK|INIT
      |START|FIRST|ENTER
      |LEAVE|KEEP|UNDO
      |NEXT|LAST|PRE
      |POST|END|CATCH
      |CONTROL|TEMP|QUIT
    )(?!\\-)\\b'
    'name': 'keyword.control.closure.trait.perl6'
  }
  {
    'match': '\\b(?<![\\-:])(die|fail|try|warn)(?!\\-)\\b(?!\\s*=>)'
    'name': 'keyword.control.control-handlers.perl6'
  }
  {
    'match': '(?x)\\b(?<![\\-:])(
       prec|irs|ofs|ors|export|raw|deep
      |binary|unary|reparsed|rw|parsed
      |cached|readonly|defequiv|will
      |ref|copy|inline|tighter|looser
      |equiv|assoc|required
    )(?!\\-)\\b  (?!\\s*=>)'
    'name': 'entity.name.type.trait.perl6'
  }
  {
    'match': '\\b(NaN|Inf)(?!\\-)\\b'
    'name': 'constant.numeric.perl6'
  }
  {
    'match': '\\b(True|False)\\b'
    'name': 'constant.language.boolean.perl6'
  }
  {
    'match': '(?x)\\b(?<![\\-:])(
      fatal|internals|MONKEY\\-TYPING|nqp|
      strict|trace|worries|invocant|parameters|experimental|
      cur|soft|variables|attributes|v6(?:\\.\\w)*|lib|Test|NativeCall
    )(?!\\-) \\b (?!\\s*=>)'
    'name': 'constant.language.pragma.perl6'
  }
  {
        'match': '(?x)(?<![:\\-\\w])
          (Backtrace|Exception|Failure|X)
          (?:
            \\:\\:[a-zA-Z]+
          )*
        \\b'
        'captures':
          '0':
            'name': 'support.type.exception.perl6'
  }
  {
    'match': '(?x)\\b(?<!:)(
      AST|Any|Array|Associative|Attribute|Bag|BagHash|Baggy|
      Blob|Block|Bool|Callable|Capture|Channel|Code|Complex|Cool|
      CurrentThreadScheduler|Cursor|Date|DateTime|Dateish|Duration|
      Enum|FatRat|Grammar|Hash|IO|Instant|Iterable|
      Iterator|Junction|Label|List|Lock|Macro|Map|Match|Metamodel|
      Method|Mix|MixHash|Mixy|Mu|Nil|Numeric|ObjAt|Pair|
      Parameter|Pod|Positional|PositionalBindFailover|Proc|Promise|
      Proxy|QuantHash|Range|Rat|Rational|Real|Regex|Routine|Scheduler|
      Seq|Set|SetHash|Setty|Signature|Slip|Stash|Str|str|Stringy|Sub|
      Submethod|Supply|Tap|Temporal|Thread|ThreadPoolScheduler|
      Variable|Version|Whatever|WhateverCode|bool|size_t|
      Int|int|int1|int2|int4|int8|int16|int32|int64|
      Rat|rat|rat1|rat2|rat4|rat8|rat16|rat32|rat64|
      Buf|buf|buf1|buf2|buf4|buf8|buf16|buf32|buf64|
      UInt|uint|uint1|uint2|uint4|uint8|uint16|uint32|uint64|
      utf8|utf16|utf32|Num|num|num32|num64|IntStr|NumStr|
      RatStr|ComplexStr|CArray|Pointer|long|longlong
    )(?!\\:\\:)\\b (?!\\s*=>)'
    'captures':
      '1':
        'name': 'support.type.perl6'
      '2':
        'name': 'support.class.type.adverb.perl6'
  }
  {
    'match': '(?x) ( \\[ / \\] )'
    'name': 'keyword.operator.reduction.perl6'
  }
  {
    'match': '(?<=\\w)(\\:)([DU_])\\b'
    'name': 'meta.adverb.definedness.perl6'
    'captures':
      '1':
        'name': 'keyword.operator.adverb.perl6'
      '2':
        'name': 'keyword.other.special-method.definedness.perl6'
  }
  {
    'match': '(?x)\\b(
        div|mod|gcd|lcm|x|xx|temp|let|but|cmp|leg|
        eq|ne|gt|ge|lt|le|before|after|eqv|min|max|ff|fff|not|so|Z|
        and|andthen|or|orelse
      )\\b(?!\\-)|
      \\b(X)(?!:)\\b'
    'name': 'keyword.operator.word.perl6'
  }
  {
    'match': '(=)(~)(=)'
    'captures':
      '1':
        'name': 'keyword.operator.approx-equal.perl6'
      '2':
        'name': 'keyword.operator.approx-equal.perl6'
      '3':
        'name': 'keyword.operator.approx-equal.perl6'
    'name': 'meta.operator.non.ligature.perl6'
  }
  {
    'match': '(?x) <=> | => | --> | -> | \\+\\| | \\+\\+ | -- |
       \\*\\* | \\?\\?\\? | \\?\\? | \\!\\!\\! | \\!\\! | && |
      \\+\\^ | \\?\\^ | %% | \\+& | \\+< | \\+> | \\+\\^ |
      \\.\\.(?!\\.) | \\.\\.\\^ | \\^\\.\\. | \\^\\.\\.\\^ |
      \\?\\| | !=(?!\\=) | !==(?!\\=) | <=(?!>) | >= | === | == |
      =:= | ~~ | \\x{2245} | \\|\\| | \\^\\^ | \\/\\/ | := | ::= |
      \\.\\.\\.'
    'name': 'keyword.operator.multi-symbol.perl6'
  }
  {
    'include': '#special_variables'
  }
  {
    'match': '(?x)(?<=\\[)
      \\s* (\\*) \\s*
      ([\\-\\*%\\^\\+\\/]|div|mod|gcd|lcm)
      \\s* (\\d+) \\s*
    (?=\\])'
    'name': 'meta.subscript.whatever.perl6'
    'captures':
      '1':
        'name': 'constant.language.whatever.perl6'
      '2':
        'name': 'keyword.operator.minus.back-from.perl6'
      '3':
        'name': 'constant.numeric.back-from.perl6'
  }
  {
    'match': '\\*\\s*(?=\\])'
    'name': 'constant.language.whatever.hack.perl6'
  }
  {
    'include': '#variables'
  }
  # Word quoting matching: `=\s*<word quoting>`
  {
    'begin': '(?x) (?<= =) \\s* \\K ( < )'
    'beginCaptures':
      '1':
        'name': 'span.keyword.operator.array.words.perl6'
    'end': '(?x) \\\\\\\\>|(?<!\\\\) ( > )'
    'endCaptures':
      '1':
        'name': 'span.keyword.operator.array.words.perl6'
    'contentName': 'string.array.words.perl6'
    'patterns':
      { 'include': 'source.quoting.perl6#q_bracket_string_content' }
  }
  {
    'begin': '(?x) (?<! \\+< ) (?! =) (<) (?= [^<]*[^<}] >)'
    'beginCaptures':
      '1':
        'name': 'span.keyword.operator.array.words.perl6'
    'end':   '(?x) (?<!\\\\) ( > )'
    'endCaptures':
      '1':
        'name': 'span.keyword.operator.array.words.perl6'
    'contentName': 'string.array.words.perl6'
  }

  # Dual functions and methods
  {
    'match': '(?x)\\b(?<![\\-:]|\\\\)(
       eager|hyper|substr|index|rindex|grep|map|sort|join|lines|hints
      |chmod|split|reduce|min|max|reverse|truncate|zip|cat|roundrobin
      |classify|first|sum|keys|values|pairs|defined|delete|exists
      |elems|end|kv|any|all|one|wrap|shape|key|value|name|pop|push
      |shift|splice|unshift|floor|ceiling|abs|exp|log|log10|rand|sign
      |sqrt|sin|cos|tan|round|strand|roots|cis|unpolar|polar|atan2
      |pick|chop|chomp|lc|lcfirst|uc|ucfirst|capitalize
      |normalize|pack|unpack|quotemeta|comb|samecase|sameaccent|chars
      |nfd|nfc|nfkd|nfkc|printf|sprintf|caller|evalfile|run|runinstead
      |nothing|want|bless|chr|ord|gmtime|time|eof|localtime|gethost
      |getpw|chroot|getlogin|getpeername|kill|fork|wait|perl|graphs
      |codes|bytes|clone|print|open|read|write|readline|say|seek|close
      |opendir|readdir|slurp|spurt|shell|run|pos|fmt|vec|link|unlink
      |symlink|unique|pair|asin|atan|sec|cosec|cotan|asec|acosec|acotan
      |sinh|cosh|tanh|asinh|done|acos|acosh|atanh|sech|cosech|cotanh
      |sech|acosech|acotanh|asech|ok|nok|plan-ok|dies-ok|lives-ok|skip
      |todo|pass|flunk|force-todo|use-ok|isa-ok|diag|is-deeply|isnt
      |like|skip-rest|unlike|cmp-ok|eval-dies-ok|nok-error|cmp-ok
      |eval-lives-ok|approx|is-approx|throws-ok|version-lt|plan|EVAL
      |succ|pred|times|nonce|once|signature|new|connect|operator|undef
      |undefine|sleep|from|to|infix|postfix|prefix|circumfix|can-ok
      |postcircumfix|minmax|lazy|count|unwrap|getc|pi|tau|context|void
      |quasi|body|each|contains|rewinddir|subst|can|isa|flush|arity
      |assuming|rewind|callwith|callsame|nextwith|nextsame|attr|does-ok
      |eval-elsewhere|none|srand|trim|trim-start|trim-end|lastcall
      |WHAT|WHY|WHERE|HOW|WHICH|VAR|WHO|WHENCE|ACCEPTS|REJECTS|not
      |iterator|by|re|im|invert|flip|gist|flat|tree|is-prime
      |throws-like|trans|race|hyper|tap|emit|done-testing|quit|dd|note
      |prepend|categorize|antipairs|categorize-list|parse-base
      |starts-with|ends-with|put|append|tail|\\x{03C0}|\\x{03C4}|\\x{212F}
      |get|words|new-from-pairs
    )(?!\\-)\\b(?!\\s*=>)'
    'name': 'support.function.perl6'
  }
  # Methods Only
  {
    'match': '(?x)\\b(?<![\\-:]|\\\\)(?<=\\.)
    (e|d|f|s|l|r|w|rw|x|rwx|z|abspath|basename|extension|dirname
    |watch|is-absolute|parts|volume|path|is-relative|parent|child
    |resolve|dir)
    (?!\\-)\\b(?!\\s*=>)'
    'name': 'support.function.perl6'
  }
  # Operators
  {
    'match': '(?x)
      (?<!\\(|\\*)\\%|
      [\\^\\+><\\*\\!\\?~\\/\\|]|
      (?<!\\$)\\.|
      (?<!:):(?!:)|
      (?<=\\s)\\-(?=[\\s\\(\\{\\[])|
      (?<!\\w)[o\\x{2218}](?!\\w)'
    'name': 'keyword.operator.generic.perl6'
  }
  {
    'include': '#numbers'
  }
  {
    'match': '(?x) (?<= ^|\\s) ([\\w\']+) \\s* (?= =>)'
    'name': 'string.pair.key.perl6'
  }
  {
    'match': '(?x) \\b (?<!\\d)
      ([a-zA-Z_\\x{c0}-\\x{ff}\\$])
      (
        [a-zA-Z0-9_\\x{c0}-\\x{ff}\\$]|
        [\\-\'][a-zA-Z_\\x{c0}-\\x{ff}\\$][a-zA-Z0-9_\\x{c0}-\\x{ff}\\$]
      )*'
    'name': 'routine.name.perl6'
  }
  {
    'begin': '(?<=\\:)(\\d+)(<)'
    'beginCaptures':
      '1':
        'name': 'support.type.radix.perl6'
      '2':
        'name': 'punctuation.definition.radix.perl6'
    'end': '>'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.radix.perl6'
    'contentName': 'constant.numeric.perl6'

  }
  {
    'begin': '\\{'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.block.perl6'
    'end': '\\}'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.block.perl6'
    'name': 'meta.block.perl6'
    'patterns': [
      {
        'include': '$self'
      }
    ]
  }
]
'repository':
  'numbers':
    'patterns': [
      # FIXME get it working on start of line
      {
        'match': '(?<=[=,;\\^\\s\\{\\[\\(\\/]|\\.\\.)0[bodx]\\w+'
        'name': 'constant.numeric.radix.perl6'
      }
      {
        'match': '(?x)
          (?<= ^ | [×÷*=,:;^\\s{\\[(/] | \\.\\. )
          (?: [+-] )?
          (?:     \\d+ (?: [\\_\\d]+ \\d )? )
          (?: \\.  \\d+ (?: [\\_\\d]+ \\d )? )?
          (?:  e  \\d+ (?: [\\_\\d]+ \\d )? )?'
        'name': 'constant.numeric.perl6'
      }
    ]
  # Pod =begin =end
  'comment-block-delimited':
    'patterns': [
        {
          'begin': '^\\s*(=)(begin)\\s+(\\w+)'
          'end': '^\\s*(=)(end)\\s+(\\w+)'
          'captures':
            '1':
              'name': 'storage.modifier.block.delimited.perl6'
            '2':
              'name': 'keyword.operator.block.delimited.perl6'
            '3':
              'name': 'entity.other.attribute-name.block.delimited.perl6'
          'contentName': 'comment.block.delimited.perl6'
          'patterns': [
            {
              'include': '#comment-block-syntax'
            }
          ]
        }
    ]
  # Pod abbreviated other
  'comment-block-abbreviated':
    'patterns': [
        {
          'begin': '^\\s*(=)(\\w+)\\s+(.+?)\\s*$'
          'end': '(?=^\\s*$|^\\s*=\\w+.*$)'
          'captures':
            '1':
              'name': 'storage.modifier.block.abbreviated.perl6'
            '2':
              'name': 'entity.other.attribute-name.block.abbreviated.perl6'
            '3':
              'name': 'entity.name.section.abbreviated.perl6'
          'name': 'comment.block.abbreviated.perl6'
          'patterns': [
            {
              'include': '#comment-block-syntax'
            }
          ]
        }
    ]
  'shellquotes':
    'patterns': [
        {
          'begin': '([qQ]x)\\s*({{)'
          'beginCaptures':
            '1':
              'name': 'string.quoted.q.shell.operator.perl6'
            '2':
              'name': 'punctuation.section.embedded.shell.begin.perl6'
          'end': '}}'
          'endCaptures':
            '0':
              'name': 'punctuation.section.embedded.shell.begin.perl6'
          'name': 'meta.shell.quote.single.perl6'
          'patterns': [
            {
              'include': 'source.shell'
              'include': 'source.quoting.perl6#q_single_string_content'
            }
          ]
        }
        {
          'begin': '([qQ]x)\\s*({)'
          'beginCaptures':
            '1':
              'name': 'string.quoted.q.shell.operator.perl6'
            '2':
              'name': 'punctuation.section.embedded.shell.begin.perl6'
          'end': '}'
          'endCaptures':
            '0':
              'name': 'punctuation.section.embedded.shell.begin.perl6'
          'name': 'meta.shell.quote.single.perl6'
          'patterns': [
            {
              'include': 'source.shell'
              'include': 'source.quoting.perl6#q_single_string_content'

            }
          ]
        }
        {
          'begin': '([qQ]x)\\s*(\\[\\[)'
          'beginCaptures':
            '1':
              'name': 'string.quoted.q.shell.operator.perl6'
            '2':
              'name': 'punctuation.section.embedded.shell.begin.perl6'
          'end': '\\]\\]'
          'endCaptures':
            '0':
              'name': 'punctuation.section.embedded.shell.begin.perl6'
          'name': 'meta.shell.quote.single.perl6'
          'patterns': [
            {
              'include': 'source.shell'
              'include': 'source.quoting.perl6#q_single_string_content'
            }
          ]
        }
        {
          'begin': '([Qq]x)\\s*(\\[)'
          'beginCaptures':
            '1':
              'name': 'string.quoted.q.shell.operator.perl6'
            '2':
              'name': 'punctuation.section.embedded.shell.begin.perl6'
          'end': '\\]'
          'endCaptures':
            '0':
              'name': 'punctuation.section.embedded.shell.begin.perl6'
          'name': 'meta.shell.quote.single.perl6'
          'patterns': [
            {
              'include': 'source.shell'
              'include': 'source.quoting.perl6#q_single_string_content'
            }
          ]
        }
        {
          'begin': '([Qq]x)\\s*(\\|)'
          'beginCaptures':
            '1':
              'name': 'string.quoted.q.shell.operator.perl6'
            '2':
              'name': 'punctuation.section.embedded.shell.begin.perl6'
          'end': '\\|'
          'endCaptures':
            '0':
              'name': 'punctuation.section.embedded.shell.begin.perl6'
          'name': 'meta.shell.quote.single.perl6'
          'patterns': [
            {
              'include': 'source.shell'
              'include': 'source.quoting.perl6#q_single_string_content'
            }
          ]
        }
        {
          'begin': '([Qq]x)\\s*(\\/)'
          'beginCaptures':
            '1':
              'name': 'string.quoted.q.shell.operator.perl6'
            '2':
              'name': 'punctuation.section.embedded.shell.begin.perl6'
          'end': '(?<!\\\\)\\/'
          'endCaptures':
            '0':
              'name': 'punctuation.section.embedded.shell.begin.perl6'
          'name': 'meta.shell.quote.single.perl6'
          'patterns': [
            {
              'match': '\\\\\\/'
              'name': 'constant.character.escape.perl6'
            }
            {
              'include': 'source.shell'
              'include': 'source.quoting.perl6#q_single_string_content'
            }
          ]
        }
        {
          'begin': '(qqx)\\s*({{)'
          'beginCaptures':
            '1':
              'name': 'string.quoted.q.shell.operator.perl6'
            '2':
              'name': 'punctuation.section.embedded.shell.begin.perl6'
          'end': '}}'
          'endCaptures':
            '0':
              'name': 'punctuation.section.embedded.shell.begin.perl6'
          'name': 'meta.shell.quote.double.perl6'
          'patterns': [
            {
              'include': '#interpolation'
            }
            {
              'include': '#variables'
            }
            {
              'include': 'source.shell'
            }
          ]
        }
        {
          'begin': '(qqx)\\s*({)'
          'beginCaptures':
            '1':
              'name': 'string.quoted.q.shell.operator.perl6'
            '2':
              'name': 'punctuation.section.embedded.shell.begin.perl6'
          'end': '}'
          'endCaptures':
            '0':
              'name': 'punctuation.section.embedded.shell.begin.perl6'
          'name': 'meta.shell.quote.double.perl6'
          'patterns': [
            {
              'include': '#interpolation'
            }
            {
              'include': '#variables'
            }
            {
              'include': 'source.shell'
            }
          ]
        }
        {
          'begin': '(qqx)\\s*(\\[\\[)'
          'beginCaptures':
            '1':
              'name': 'string.quoted.q.shell.operator.perl6'
            '2':
              'name': 'punctuation.section.embedded.shell.begin.perl6'
          'end': '\\]\\]'
          'endCaptures':
            '0':
              'name': 'punctuation.section.embedded.shell.begin.perl6'
          'name': 'meta.shell.quote.double.perl6'
          'patterns': [
            {
              'include': '#interpolation'
            }
            {
              'include': '#variables'
            }
            {
              'include': 'source.shell'
            }
          ]
        }
        {
          'begin': '(qqx)\\s*(\\[)'
          'beginCaptures':
            '1':
              'name': 'string.quoted.q.shell.operator.perl6'
            '2':
              'name': 'punctuation.section.embedded.shell.begin.perl6'
          'end': '\\]'
          'endCaptures':
            '0':
              'name': 'punctuation.section.embedded.shell.begin.perl6'
          'name': 'meta.shell.quote.double.perl6'
          'patterns': [
            {
              'include': '#interpolation'
            }
            {
              'include': '#variables'
            }
            {
              'include': 'source.shell'
            }
          ]
        }
        {
          'begin': '(qqx)\\s*(\\|)'
          'beginCaptures':
            '1':
              'name': 'string.quoted.q.shell.operator.perl6'
            '2':
              'name': 'punctuation.section.embedded.shell.begin.perl6'
          'end': '\\|'
          'endCaptures':
            '0':
              'name': 'punctuation.section.embedded.shell.begin.perl6'
          'name': 'meta.shell.quote.double.perl6'
          'patterns': [
            {
              'include': '#interpolation'
            }
            {
              'include': '#variables'
            }
            {
              'include': 'source.shell'
            }
          ]
        }
        {
          'begin': '(qqx)\\s*(\\/)'
          'beginCaptures':
            '1':
              'name': 'string.quoted.q.shell.operator.perl6'
            '2':
              'name': 'punctuation.section.embedded.shell.begin.perl6'
          'end': '(?<!\\\\)\\/'
          'endCaptures':
            '0':
              'name': 'punctuation.section.embedded.shell.begin.perl6'
          'name': 'meta.shell.quote.double.perl6'
          'patterns': [
            {
              'match': '\\\\\\/'
              'name': 'constant.character.escape.perl6'
            }
            {
              'include': '#interpolation'
            }
            {
              'include': '#variables'
            }
            {
              'include': 'source.shell'
            }
          ]
        }
    ]
  'comment-block-syntax':
    'patterns': [
      {
        'include': '#comment-block-delimited'
      }
      {
        'include': '#comment-block-abbreviated'
      }
      {
        'match': '(L)(\\<)(.+?)(?:(\\|)(.+?))?(\\>)'
        'captures':
          '1':
            'name': 'support.function.pod.link.perl6'
          '2':
            'name': 'punctuation.section.embedded.pod.link.perl6'
          '3':
            'name': 'entity.name.type.pod.link.perl6'
          '4':
            'name': 'punctuation.section.embedded.pod.link.perl6'
          '5':
            'name': 'markup.underline.link.pod.perl6'
          '6':
            'name': 'punctuation.section.embedded.pod.link.perl6'
        'name': 'meta.pod.l.perl6'
      }
      {
        'match': '([CKT])(?:(\\<\\<)(.+?)(\\>\\>)|(\\<)(.+?)(\\>))'
        'captures':
          '1':
            'name': 'support.function.pod.code.perl6'
          '2':
            'name': 'punctuation.section.embedded.pod.code.perl6'
          '3':
            'name': 'markup.raw.code.perl6'
          '4':
            'name': 'punctuation.section.embedded.pod.code.perl6'
          '5':
            'name': 'punctuation.section.embedded.pod.code.perl6'
          '6':
            'name': 'markup.raw.code.perl6'
          '7':
            'name': 'punctuation.section.embedded.pod.code.perl6'
        'name': 'meta.pod.c.perl6'
      }
      {
        'match': '(U)(\\<)(.+?)(\\>)'
        'captures':
          '1':
            'name': 'support.function.pod.code.perl6'
          '2':
            'name': 'punctuation.section.embedded.pod.code.perl6'
          '3':
            'name': 'markup.underline.perl6'
          '4':
            'name': 'punctuation.section.embedded.pod.code.perl6'
        'name': 'meta.pod.c.perl6'
      }
      {
        'match': '(I)(\\<)(.+?)(\\>)'
        'captures':
          '1':
            'name': 'support.function.pod.code.perl6'
          '2':
            'name': 'punctuation.section.embedded.pod.code.perl6'
          '3':
            'name': 'markup.italic.perl6'
          '4':
            'name': 'punctuation.section.embedded.pod.code.perl6'
        'name': 'meta.pod.c.perl6'
      }
      {
        'match': '(B)(\\<)(.+?)(\\>)'
        'captures':
          '1':
            'name': 'support.function.pod.code.perl6'
          '2':
            'name': 'punctuation.section.embedded.pod.code.perl6'
          '3':
            'name': 'markup.bold.perl6'
          '4':
            'name': 'punctuation.section.embedded.pod.code.perl6'
        'name': 'meta.pod.c.perl6'
      }
    ]
  'heredocs':
    'patterns': [
        {
          'begin': '(?x)
            (?:
              ([qQ](?!/)|qq|qw|qww|qx|qqx)
              \\s*
              ((?:\\s*:\\w+)*\\s*:(?:to|heredoc))\\s*
            |
              (qto|qqto|Qto)
              \\s*
              ((?:\\s*:\\w+)*)\\s*
            )
            /(\\S+)/'
          'beginCaptures':
            '1':
              'name': 'string.quoted.construct.perl6'
            '2':
              'name': 'support.function.adverb.perl6'
            '3':
              'name': 'string.quoted.construct.perl6'
            '4':
              'name': 'support.function.adverb.perl6'
            '5':
              'name': 'entity.other.attribute-name.heredoc.delimiter.perl6'
          'end': '\\s*\\5'
          'endCaptures':
            '0':
              'name': 'entity.other.attribute-name.heredoc.delimiter.perl6'
          'patterns': [
            {
              'begin': '(?<=/)'
              'end': '\\n'
              'patterns': [
                {
                  'include': '$self'
                }
              ]
              'name': 'meta.heredoc.continuation.perl6'
            }
            {
              'match': '^(?:.|\\n)*$'
              'name': 'string.quoted.heredoc.perl6'
            }
          ]
          'name': 'meta.heredoc.perl6'
        }
    ]
  'p5_regex':
    'patterns': [
      {
        'begin': '(?x)(?<![\\w\\/])(m|rx)
          \\s*((?:\\s*:\\w+)*)?(:P5)((?:\\s*:\\w+)*)?\\s*
          (\\{)'
        'beginCaptures':
          '1':
            'name': 'string.regexp.construct.perl6'
          '2':
            'name': 'entity.name.section.adverb.regexp.perl6'
          '3':
            'name': 'entity.name.section.p5.adverb.regexp.perl6'
          '4':
            'name': 'entity.name.section.adverb.regexp.perl6'
          '5':
            'name': 'punctuation.definition.regexp.perl6'
        'end': '(?<!\\\\)(\\})([gmixXsuUAJ]+)?'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.regexp.perl6'
          '2':
            'name': 'invalid.illegal.p5.regexp.modifier.perl6'
        'contentName': 'string.regexp.p5.perl6'
        'patterns': [
          {
            'include': '#p5_escaped_char'
          }
          {
            'include': 'source.quoting.perl6#q_brace_string_content'
          }
        ]
      }
      {
        'begin': '(?x)(?<![\\w\\/])(m|rx)
          \\s*((?:\\s*:\\w+)*)?(:P5)((?:\\s*:\\w+)*)?\\s*
          (\\[)'
        'beginCaptures':
          '1':
            'name': 'string.regexp.construct.perl6'
          '2':
            'name': 'entity.name.section.adverb.regexp.perl6'
          '3':
            'name': 'entity.name.section.p5.adverb.regexp.perl6'
          '4':
            'name': 'entity.name.section.adverb.regexp.perl6'
          '5':
            'name': 'punctuation.definition.regexp.perl6'
        'end': '(?<!\\\\)(\\])([gmixXsuUAJ]+)?'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.regexp.perl6'
          '2':
            'name': 'invalid.illegal.p5.regexp.modifier.perl6'
        'contentName': 'string.regexp.p5.perl6'
        'patterns': [
          {
            'include': '#p5_escaped_char'
          }
          {
            'include': 'source.quoting.perl6#q_bracket_string_content'
          }
        ]
      }
      {
        'begin': '(?x)(?<![\\w\\/])(m|rx)
          \\s*((?:\\s*:\\w+)*)?(:P5)((?:\\s*:\\w+)*)?\\s*
          (\\/)'
        'beginCaptures':
          '1':
            'name': 'string.regexp.construct.perl6'
          '2':
            'name': 'entity.name.section.adverb.regexp.perl6'
          '3':
            'name': 'entity.name.section.p5.adverb.regexp.perl6'
          '4':
            'name': 'entity.name.section.adverb.regexp.perl6'
          '5':
            'name': 'punctuation.definition.regexp.perl6'
        'end': '(?<!\\\\)(\\/)([gmixXsuUAJ]+)?'
        'endCaptures':
          '1':
            'name': 'punctuation.definition.regexp.perl6'
          '2':
            'name': 'invalid.illegal.p5.regexp.modifier.perl6'
        'contentName': 'string.regexp.p5.perl6'
        'patterns': [
          {
            'include': '#p5_escaped_char'
          }
          {
            'include': 'source.quoting.perl6#q_slash_string_content'
          }
        ]
      }
    ]
  'p5_escaped_char':
    'patterns': [
      {
        'match': '\\\\\\d+'
        'name': 'constant.character.escape.perl'
      }
      {
        'match': '\\\\c[^\\s\\\\]'
        'name': 'constant.character.escape.perl'
      }
      {
        'match': '\\\\g(?:\\{(?:\\w*|-\\d+)\\}|\\d+)'
        'name': 'constant.character.escape.perl'
      }
      {
        'match': '\\\\k(?:\\{\\w*\\}|<\\w*>|\'\\w*\')'
        'name': 'constant.character.escape.perl'
      }
      {
        'match': '\\\\N\\{[^\\}]*\\}'
        'name': 'constant.character.escape.perl'
      }
      {
        'match': '\\\\o\\{\\d*\\}'
        'name': 'constant.character.escape.perl'
      }
      {
        'match': '\\\\(?:p|P)(?:\\{\\w*\\}|P)'
        'name': 'constant.character.escape.perl'
      }
      {
        'match': '\\\\x(?:[0-9a-zA-Z]{2}|\\{\\w*\\})?'
        'name': 'constant.character.escape.perl'
      }
      {
        'match': '\\\\.'
        'name': 'constant.character.escape.perl'
      }
    ]
  'special_variables':
    'patterns': [
      {
        'match': '(?x)
          [\\$\\@](?=[\\s,;\\{\\[\\(])|
          (?<=[\\(\\,])\\s*%(?![\\w\\*\\!\\?\\.\\^:=~])|
          \\$_|
          \\$\\/|
          \\$\\!(?!\\w)|
          \\$\\d(?!\\w)'
        'name': 'keyword.other.special-method.perl6'
      }
    ]
  'variables':
    'patterns': [
        {
          'begin': '\\$(?=\\<)'
          'beginCaptures':
            '0':
              'name': 'variable.other.identifier.sigil.regexp.perl6'
          'end': '(?![\\w\\<\\>])'
          'name': 'meta.match.variable.perl6'
          'patterns': [
            {
              'match': '(\\<)([\\w\\-]+)(\\>)'
              'captures':
                '1':
                  'name': 'support.class.match.name.delimiter.regexp.perl6'
                '2':
                  'name': 'variable.other.identifier.regexp.perl6'
                '3':
                  'name': 'support.class.match.name.delimiter.regexp.perl6'
            }
          ]
        }
        {
          'match': '(?x)
            (\\$|@|%|&)
            (\\.|\\*|:|!|\\^|~|=|\\?)?
            (
              (?:[a-zA-Z])
              (?:
                [a-zA-Z0-9_\xc0-\xff\\$]|
                [\\-\'][a-zA-Z_\xc0-\xff\\$]
              )*
            )'
          'captures':
            '1':
              'name': 'variable.other.identifier.sigil.perl6'
            '2':
              'name': 'support.class.twigil.perl6'
            '3':
              'name': 'variable.other.identifier.perl6'
          'name': 'meta.variable.container.perl6'
        }
    ]
  'interpolation':
    'patterns': [
      {
        'match': '(?x)(?<!\\\\)
          (\\$|@|%|&)(?!\\$)
          (\\.|\\*|:|!|\\^|~|=|\\?)?
          ([a-zA-Z_\xc0-\xff\\$])
          (
            [a-zA-Z0-9_\xc0-\xff\\$]|
            [\\-\'][a-zA-Z_\xc0-\xff\\$][a-zA-Z0-9_\xc0-\xff\\$]
          )*(\\[.*\\])?'
        'captures':
          '5':
            'patterns': [
              {
                'begin': '<'
                'beginCaptures':
                  '0':
                    'name': 'keyword.operator.chevron.open.perl6'
                'end': '>'
                'endCaptures':
                  '0':
                    'name': 'keyword.operator.chevron.close.perl6'
              }
              {
                'begin': '\\['
                'beginCaptures':
                  '0':
                    'name': 'keyword.operator.bracket.open.perl6'
                'end': '\\]'
                'endCaptures':
                  '0':
                    'name': 'keyword.operator.bracket.close.perl6'
                'patterns': [
                  { 'include': '$self' }
                ]
              }
            ]
        'name': 'variable.other.identifier.interpolated.perl6'
      }
      # TODO use the captures and make it highlight nicely
      {
        'match': '(?x) (\\\\x) ( \\[ ) ( [\\dA-Fa-f]+ ) ( \\] )'
        'captures':
          '1':
            'name': 'keyword.punctuation.hex.perl6'
          '2':
            'name': 'keyword.operator.bracket.open.perl6'
          '3':
            'name': 'routine.name.hex.perl6'
          '4':
            'name': 'keyword.operator.bracket.close.perl6'
        'name': 'punctuation.hex.perl6'
      }
      {
        'begin': '(\\{)'
        'beginCaptures':
          '1':
            'name': 'punctuation.section.embedded.begin.perl6'
        'end': '(\\})'
        'endCaptures':
          '1':
            'name': 'punctuation.section.embedded.end.perl6'
        'patterns': [
          'include': '$self'
        ]
        'name': 'meta.interpolation.perl6'
      }
    ]

  'q_right_double_right_double_string_content':
    'begin': '”'
    'end': '”'
    'patterns': [
      {
        'include': '#q_right_double_right_double_string_content'
      }
    ]
